spring:
  application:
    name: routing-service
  security:
    user:
      name: user
      password: sa
  jackson:
    date-format: "yyyy-MM-dd'T'HH:mm:ssXXX" # Only matches Dates no Instants!
    deserialization:
      read-date-timestamps-as-nanoseconds: false
  jpa:
    mapping-resources:
      - META-INF/routing-orm.xml
    open-in-view: false
    properties:
      hibernate:
        jdbc:
          time_zone: UTC
    show-sql: false
  liquibase:
    enabled: false
  main:
    allow-bean-definition-overriding: true
    allow-circular-references: true # Because of Activiti
  mvc:
    format:
      date-time: "yyyy-MM-dd'T'HH:mm:ssXXX" # Must match the pattern how of @JsonFormat field annotation patterns
      date: yyyy-MM-dd
      time: HH:mm:ss
    static-path-pattern: /ui/**
  output:
    ansi:
      enabled: always
  rabbitmq:
    listener:
      simple:
        retry:
          max-attempts: 3
          enabled: true
          initial-interval: 1s
          max-interval: 1s

owms:
  driver:
    osip:
      enabled: true
  eureka:
    url: http://user:sa@localhost:8761
    zone: ${owms.eureka.url}/eureka/
  routing:
    serialization: json
  srv:
    hostname: localhost
    protocol: http
  tracing:
    url: http://localhost:4317

server:
  port: ${PORT:8130}

eureka:
  client:
    instance-info-replication-interval-seconds: 10 # default is 30
    registryFetchIntervalSeconds: 5 # SBA
    service-url:
      defaultZone: ${owms.eureka.zone}  # Must be camelCase
  instance:
    hostname: ${owms.srv.hostname}
    # Request a lease with a validity of 5 seconds. If until then the
    # lease has not been renewed, it expires and the Eureka server can evict it.
    # Default: 90s
    lease-expiration-duration-in-seconds: 5

    # The cadence of lease renewal, i.e. how often a heartbeat is sent to Eureka server.
    # In this case every 2 seconds. Use this only for development / debugging. In production use the ...
    # Default: 30s
    lease-renewal-interval-in-seconds:    2
    metadata-map:
      group: TMS
      config-protocol: http # The protocol used to access the config server
      username: ${spring.security.user.name}
      password: ${spring.security.user.password}
      protocol: ${owms.srv.protocol}
      startup: ${random.int} # SBA
      zone: ${owms.eureka.zone}
    non-secure-port-enabled: true
    prefer-ip-address: true
    secure-port-enabled: false

info:
  scm-url: "@scm.url@"
  build-url: "@ciManagement.url@"

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    rabbit:
      enabled: false
  metrics:
    distribution:
      percentiles-histogram:
        greeting: true
        http:
          server:
            requests: true
    tags:
      application: ${spring.application.name}
    web:
      server:
        request:
          autotime:
        enabled: true
  info:
    git:
      mode: simple
  tracing:
    sampling:
      probability: 1.0
  otlp:
    tracing:
      endpoint: ${owms.tracing.url}
  prometheus:
    metrics:
      export:
        enabled: true

flowable:
  app:
    enabled: false
    deploy-resources: false
    servlet:
      load-on-startup: 0
  cmmn:
    enabled: false
    deploy-resources: false
    servlet:
      load-on-startup: 0
    async:
      executor:
        auto-activate: false
  content:
    enabled: false
    servlet:
      load-on-startup: 0
  database-schema-update: false
  dmn:
    enabled: false
    deploy-resources: false
    resource-location: classpath*:/flowable/dmn/
    servlet:
      load-on-startup: 0
    history-enabled: false
  form:
    enabled: false
    deploy-resources: false
    servlet:
      load-on-startup: 0
  idm:
    enabled: false
    servlet:
      load-on-startup: 0
  process-definition-location-prefix: classpath*:/flowable/processes/
  process:
    enabled: false
    servlet:
      load-on-startup: 0
    async-history:
      executor:
        auto-activate: false
  jpa-enabled: false
  async-executor-activate: false

---
spring:
  config:
    activate:
      on-profile: "!FLOWABLE && !ACTIVITI"

camunda:
  bpm:
    auto-deployment-enabled: true
    enabled: true
    deployment-resource-pattern: classpath*:**/camunda/processes/*.bpmn20.xml,classpath*:**/camunda/processes/*.bpmn,classpath*:**/camunda/processes/*.dmn11.xml,classpath*:**/camunda/processes/*.dmn

---
spring:
  config:
    activate:
      on-profile: "ACTIVITI"
  activiti:
    process-definition-location-prefix: classpath:activiti/
    database-schema-update: true
    database-schema: public
  jpa:
    generate-ddl: true
    hibernate:
      ddl-auto: create

camunda:
  bpm:
    auto-deployment-enabled: false
    enabled: false

---
spring:
  config:
    activate:
      on-profile: "!ASYNCHRONOUS"

owms:
  partners:
    sps01: tcpip-palettconv
    sps02: tcpip-palett1
    sps03: tcpip-palett2
    sps04: tcpip-cartonconv
    sps05: tcpip-carton1
    sps06: tcpip-carton2

---
spring:
  config:
    activate:
      on-profile: ASYNCHRONOUS
  rabbitmq:
    listener:
      simple:
        retry:
          max-attempts: 3
          enabled: true
          initial-interval: 1s
          max-interval: 1s

health:
  config:
    enabled: true

management:
  health:
    rabbit:
      enabled: true

owms:
  commands:
    common:
      registration:
        exchange-name: common.registration.commands # Send commands to Common
  driver:
    osip:
      err:
        queue-name: tms-rtng-err
        exchange-name: osip
        routing-key-in: osip.err.ss
      locu:
        queue-name: tms-rtng-locu
        exchange-name: osip
        routing-key-in: osip.locu.ss
      sysu:
        queue-name: tms-rtng-sysu
        exchange-name: osip
        routing-key-in: osip.sysu.ss
      req:
        queue-name: tms-rtng-req
        exchange-name: osip
        routing-key-in: osip.req.ss
      res:
        exchange-name: osip
      upd:
        queue-name: tms-rtng-upd
        exchange-name: osip
        routing-key-in: osip.upd.ss
      updx:
        queue-name: tms-rtng-updx
        exchange-name: osip
        routing-key-in: osip.updx.ss
  events:
    common:
      lg:
        exchange-name: common.lg
        queue-name: routing-lg-queue
        routing-key: lg.event.*
      loc:
        exchange-name: common.lg
        queue-name: routing-loc-queue
        routing-key: loc.event.*
  partners:
    sps01: osip.res.1
    sps02: osip.res.2
    sps03: osip.res.3
    sps04: osip.res.4
    sps05: osip.res.5
  requests:
    routing:
      to:
        exchange-name: tms.requests
        queue-name: routing-requests-queue
        routing-key: "*.*.*"
  routing:
    serialization: json
    dead-letter:
      exchange-name: dle.routing
      queue-name: dlq-routing-queue
    registration:
      location-request-removal-path: /v1/locations/remove
      location-removal-path: /v1/locations

---
# Might run in standalone or distributed environment
spring:
  config:
    activate:
      on-profile: DEMO
  cloud:
    bootstrap:
      enabled: false
    bus:
      enabled: false
    config:
      discovery:
        enabled: false
      enabled: false
      fail-fast: false # true means retry
      retry:
        max-attempts: 120
    discovery:
      enabled: false
  h2:
    console:
      enabled: true
      settings:
        web-allow-others: true
  jpa:
    generate-ddl: true
    hibernate:
      ddl-auto: update

---
spring:
  config:
    activate:
      on-profile: DISTRIBUTED
  cloud:
    config:
      discovery:
        enabled: true
      enabled: true
    discovery:
      enabled: true
  zipkin:
    sender:
      type: web
    enabled: true

---
spring:
  config:
    activate:
      on-profile: FLOWABLE

flowable:
  app:
    enabled: true
    deploy-resources: true
    servlet:
      load-on-startup: 1
  cmmn:
    enabled: true
    deploy-resources: true
    servlet:
      load-on-startup: 1
    async:
      executor:
        auto-activate: true
  content:
    enabled: true
    servlet:
      load-on-startup: 1
  database-schema-update: true
  dmn:
    enabled: true
    deploy-resources: true
    servlet:
      load-on-startup: 1
    history-enabled: true
  form:
    enabled: true
    deploy-resources: true
    servlet:
      load-on-startup: 1
  idm:
    enabled: true
    servlet:
      load-on-startup: 1
  process:
    enabled: true
    servlet:
      load-on-startup: 1
    async-history:
      executor:
        auto-activate: true
  jpa-enabled: true
  async-executor-activate: true

camunda:
  bpm:
    auto-deployment-enabled: false
    enabled: false

---
spring:
  config:
    activate:
      on-profile: HEROKU
  main:
    banner-mode: "OFF"

owms:
  srv:
    protocol: https
    hostname: openwms-routing-service.herokuapp.com

eureka:
  instance:
    secure-port-enabled: true
    non-secure-port-enabled: false
    statusPageUrl: ${owms.srv.protocol}://${owms.srv.hostname}:${server.port}/actuator/info
    healthCheckUrl: ${owms.srv.protocol}://${owms.srv.hostname}:${server.port}/actuator/health
    homePageUrl: ${owms.srv.protocol}://${owms.srv.hostname}:${server.port}/actuator/
    metadata-map:
      config-protocol: ${owms.cfgsrv.protocol:https}

---
spring:
  config:
    activate:
      on-profile: SYNCHRONOUS
  cloud:
    config:
      discovery:
        enabled: true
      enabled: true
    discovery:
      enabled: true

---
spring:
  config:
    activate:
      on-profile: TEST
  cloud:
    bootstrap:
      enabled: false
    bus:
      enabled: false
    config:
      discovery:
        enabled: false
      enabled: false
      fail-fast: false # true means retry
      retry:
        max-attempts: 120
    discovery:
      enabled: false
  jpa:
    show-sql: false
  main:
    banner-mode: "off"
  zipkin:
    enabled: false
    discovery-client-enabled: false
    sender:
      type: rabbit

---
spring:
  config:
    activate:
      on-profile: TESTPG
  cloud:
    bootstrap:
      enabled: false
    bus:
      enabled: false
    config:
      discovery:
        enabled: false
      enabled: false
      fail-fast: false # true means retry
      retry:
        max-attempts: 120
    discovery:
      enabled: false
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql:testdb
    username: KARL
    password: KARL
  jpa:
    database: postgresql
    generate-ddl: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        temp:
          use_jdbc_metadata_defaults: false
        default_schema: public
    hibernate:
      ddl-auto: update
  main:
    banner-mode: "off"
  zipkin:
    enabled: false
    discovery-client-enabled: false
    sender:
      type: rabbit
